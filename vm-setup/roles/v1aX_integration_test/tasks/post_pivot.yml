  - name: Define number of BMH's
    set_fact:
      NUMBER_OF_BMH: "{{ NUM_OF_MASTER_REPLICAS|int +  NUM_OF_WORKER_REPLICAS|int }}"
      
  - name: Untaint all nodes.
    shell: |
        kubectl taint nodes --all node-role.kubernetes.io/master-
    environment:
      KUBECONFIG: "{{ TARGET_KUBECONFIG }}"
    ignore_errors: yes
  
  - name: Scale worker down to 0.
    shell: |
        kubectl scale machinedeployment "{{ CLUSTER_NAME }}"  -n "{{ NAMESPACE }}" --replicas=0        
    environment:
      KUBECONFIG: "{{ TARGET_KUBECONFIG }}"
  
  - name: Wait until worker is scaled down and one bmh is Ready
    shell: kubectl get bmh -n "{{ NAMESPACE }}" | grep -w ready | wc -l
    environment:
      KUBECONFIG: "{{ TARGET_KUBECONFIG }}"
    retries: 200
    delay: 20
    register: ready_hosts
    until: ready_hosts.stdout == "1"

  - name: Scale worker back to 1.
    shell: |
        kubectl scale machinedeployment "{{ CLUSTER_NAME }}"  -n "{{ NAMESPACE }}" --replicas=1        
    environment:
      KUBECONFIG: "{{ TARGET_KUBECONFIG }}"

  - name: Wait until all "{{ NUMBER_OF_BMH }}" BMH are provisioned
    shell: kubectl get bmh -n "{{ NAMESPACE }}" | grep -w provisioned | wc -l
    environment:
      KUBECONFIG: "{{ TARGET_KUBECONFIG }}"
    retries: 200
    delay: 20
    register: provisioned_hosts
    until: provisioned_hosts.stdout == NUMBER_OF_BMH

  - name: Wait until "{{ NUMBER_OF_BMH }}" machines become running.
    shell: |
        kubectl get machines -n "{{ NAMESPACE }}" -o json | jq -r '[ .items[]
        | select (.status.phase == "Running" or .status.phase == "running")
        | .metadata.name ] | length'
    environment:
      KUBECONFIG: "{{ TARGET_KUBECONFIG }}"
    register: provisioned_machines
    retries: 200
    delay: 20
    until: provisioned_machines.stdout == NUMBER_OF_BMH