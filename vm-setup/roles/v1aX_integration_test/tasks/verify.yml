---
  - name: Define number of BMH's
    set_fact:
      NUMBER_OF_BMH: "{{ NUM_OF_MASTER_REPLICAS|int +  NUM_OF_WORKER_REPLICAS|int }}"

  - name: Wait until cluster becomes provisioned.
    shell: "kubectl get cluster -n metal3 -o json | jq -r '.items[] | .status.phase'"
    register: provisioned_cluster
    retries: 100
    delay: 20
    until: (provisioned_cluster.stdout == "provisioned") or
           (provisioned_cluster.stdout == "Provisioned")

  - name: Wait until "{{ NUMBER_OF_BMH }}" BMHs become provisioned.
    shell: |
        kubectl get bmh -n metal3 -o json | jq -r '[ .items[]
        | select (.status.provisioning.state == "provisioned")
        | .metadata.name ] | length'
    register: provisioned_bmh
    retries: 200
    delay: 30
    until: provisioned_bmh.stdout == NUMBER_OF_BMH

  - name: Wait until "{{ NUMBER_OF_BMH }}" machines become running.
    shell: |
        kubectl get machines -n metal3 -o json | jq -r '[ .items[]
        | select (.status.phase == "Running" or .status.phase == "running")
        | .metadata.name ] | length'
    register: provisioned_machines
    retries: 150
    delay: 20
    until: provisioned_machines.stdout == NUMBER_OF_BMH

  - name: Define username variable as "{{ IMAGE_USERNAME }}" for target node
    set_fact:
      username: "{{ IMAGE_USERNAME }}"

  - name: Fetch target cluster kubeconfig
    community.kubernetes.k8s_info:
      api_version: v1
      kind: Secret
      name: "{{ CLUSTER_NAME }}-kubeconfig"
      namespace: "{{ NAMESPACE }}"
    register: secret

  - local_action: 
      module: copy 
      content: "{{ secret | json_query('resources[*].data.value') | b64decode}}"
      dest: "{{ TARGET_KUBECONFIG }}"

  # Install Calico
  - name: Download Calico manifest
    get_url:
      url: https://docs.projectcalico.org/manifests/calico.yaml
      dest: /tmp/
      mode: '664'

  - name: Replace the POD_CIDR in calico config
    replace:
      path: /tmp/calico.yaml
      regexp: "192.168.0.0/16"
      replace: "{{ POD_CIDR }}"

  - name: Add IP_AUTODETECTION_METHOD in calico config Ubuntu
    blockinfile:
      path: /tmp/calico.yaml
      insertafter: "{{ POD_CIDR }}"
      block: |
          # for indentation
                      - name: IP_AUTODETECTION_METHOD
                        value: "interface=enp2s0"
    when:
      ansible_distribution == "Ubuntu"

  - name: Add IP_AUTODETECTION_METHOD in calico config Centos
    blockinfile:
      path: /tmp/calico.yaml
      insertafter: "{{ POD_CIDR }}"
      block: |
          # for indentation
                      - name: IP_AUTODETECTION_METHOD
                        value: "interface=eth1"
                      - name: FELIX_IPTABLESBACKEND
                        value: "NFT"
    when:
      ansible_distribution == "CentOS"

  - name: Apply Calico manifest
    k8s:
      state: present
      src: "/tmp/calico.yaml"
      kubeconfig: "{{ TARGET_KUBECONFIG }}"

  - name: Wait until target cluster Pods are in Running state
    community.kubernetes.k8s_info:
      api_version: v1
      kind: Pod
      kubeconfig: "{{ TARGET_KUBECONFIG }}"
      field_selectors:
        - status.phase=Running
    retries: 150
    delay: 20
    register: running_pods
    failed_when: >
      (running_pods.stderr != "") or
      (running_pods.rc > 1) or
      (running_pods.stdout != "")
    until: running_pods.stdout == ""

  - name: Wait until target cluster Nodes are in Running state
    shell: "kubectl get nodes --kubeconfig {{ TARGET_KUBECONFIG }} | grep -w Ready | wc -l"
    retries: 150
    delay: 3
    register: ready_nodes
    failed_when: >
      (ready_nodes.stderr != "") or
      (ready_nodes.rc != 0) or
      (ready_nodes.stdout != NUMBER_OF_BMH)
    until: ready_nodes.stdout == NUMBER_OF_BMH